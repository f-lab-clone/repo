openapi: 3.0.1
info:
  title: 프동프동 티켓팅 시스템 API Document
  description: 티켓팅 시스템 백엔드 API입니다.
  version: 1.0.0
servers:
- url: http://localhost:8080
  description: Generated server url
paths:
  /reservations/{id}:
    get:
      tags:
      - reservation-controller
      operationId: getReservation
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ReservationResponse'
    put:
      tags:
      - reservation-controller
      operationId: updateReservation
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationUpdateRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ReservationResponse'
    delete:
      tags:
      - reservation-controller
      operationId: deleteReservation
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /users/signup:
    post:
      tags:
      - user-controller
      operationId: signup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDto'
  /test:
    post:
      tags:
      - test-controller
      operationId: test
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SampleDTO'
        required: true
      responses:
        "200":
          description: OK
  /reservations:
    get:
      tags:
      - reservation-controller
      operationId: getReservations
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageReservation'
    post:
      tags:
      - reservation-controller
      operationId: createReservation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationCreateRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ReservationResponse'
  /events:
    get:
      tags:
      - event-controller
      operationId: getEvents
      parameters:
      - name: title
        in: query
        required: false
        schema:
          type: string
      - name: pageable
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageEvent'
    post:
      tags:
      - event-controller
      operationId: createEvent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCreateRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EventResponse'
  /bookmarks:
    get:
      tags:
      - bookmark-controller
      operationId: getBookmarks
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageBookmark'
    post:
      tags:
      - bookmark-controller
      operationId: addBookmark
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookmarkFromdto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /users/access_token_info:
    get:
      tags:
      - user-controller
      operationId: getAccessTokenInfo
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: object
  /test500:
    get:
      tags:
      - test-controller
      operationId: throwError
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /health:
    get:
      tags:
      - health-controller
      operationId: healthCheck2
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /events/{id}:
    get:
      tags:
      - event-controller
      operationId: getEvent
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EventResponse'
  /bookmarks/{id}:
    get:
      tags:
      - bookmark-controller
      operationId: getBookmark
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
    delete:
      tags:
      - bookmark-controller
      operationId: deleteBookmark
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /:
    get:
      tags:
      - health-controller
      operationId: healthCheck1_1
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
components:
  schemas:
    ReservationUpdateRequest:
      required:
      - eventId
      type: object
      properties:
        eventId:
          type: integer
          format: int32
    ReservationResponse:
      required:
      - address
      - createdAt
      - eventId
      - id
      - name
      - phoneNumber
      - postCode
      - userId
      type: object
      properties:
        id:
          type: integer
          format: int32
        eventId:
          type: integer
          format: int32
        userId:
          type: integer
          format: int32
        createdAt:
          type: string
          format: date-time
        name:
          type: string
        phoneNumber:
          type: string
        postCode:
          type: integer
          format: int32
        address:
          type: string
    SignUpRequest:
      required:
      - email
      - name
      - password
      - phoneNumber
      type: object
      properties:
        email:
          type: string
        name:
          maxLength: 30
          minLength: 2
          type: string
        password:
          maxLength: 128
          minLength: 9
          type: string
        phoneNumber:
          pattern: "^01(?:0|1|[6-9])[.-](\\d{3}|\\d{4})[.-](\\d{4})$"
          type: string
    UserDto:
      required:
      - email
      - name
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        createdAt:
          type: string
          format: date-time
    SampleDTO:
      required:
      - text
      type: object
      properties:
        text:
          type: string
    ReservationCreateRequest:
      required:
      - address
      - eventId
      - name
      - phoneNumber
      - postCode
      type: object
      properties:
        eventId:
          type: integer
          format: int32
        name:
          type: string
        phoneNumber:
          pattern: "^01(?:0|1|[6-9])[.-](\\d{3}|\\d{4})[.-](\\d{4})$"
          type: string
        postCode:
          type: integer
          format: int32
        address:
          type: string
    EventCreateRequest:
      required:
      - endDate
      - maxAttendees
      - reservationEndTime
      - reservationStartTime
      - startDate
      - title
      type: object
      properties:
        title:
          maxLength: 255
          minLength: 1
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        reservationStartTime:
          type: string
          format: date-time
        reservationEndTime:
          type: string
          format: date-time
        maxAttendees:
          type: integer
          format: int32
    EventResponse:
      required:
      - endDate
      - id
      - maxAttendees
      - reservationEndTime
      - reservationStartTime
      - startDate
      - title
      type: object
      properties:
        id:
          type: integer
          format: int32
        title:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        reservationStartTime:
          type: string
          format: date-time
        reservationEndTime:
          type: string
          format: date-time
        maxAttendees:
          type: integer
          format: int32
    BookmarkFromdto:
      required:
      - event_id
      type: object
      properties:
        event_id:
          type: integer
          format: int32
    Pageable:
      type: object
      properties:
        page:
          minimum: 0
          type: integer
          format: int32
        size:
          minimum: 1
          type: integer
          format: int32
        sort:
          type: array
          items:
            type: string
    Bookmark:
      required:
      - createdAt
      - event
      - updatedAt
      - user
      type: object
      properties:
        id:
          type: integer
          format: int32
        user:
          $ref: '#/components/schemas/User'
        event:
          $ref: '#/components/schemas/Event'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Event:
      required:
      - bookmarks
      - createdAt
      - endDate
      - maxAttendees
      - reservationEndTime
      - reservationStartTime
      - reservations
      - startDate
      - title
      - totalAttendees
      - updatedAt
      type: object
      properties:
        id:
          type: integer
          format: int32
        title:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        reservationStartTime:
          type: string
          format: date-time
        reservationEndTime:
          type: string
          format: date-time
        maxAttendees:
          type: integer
          format: int32
        totalAttendees:
          type: integer
          format: int32
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        bookmarks:
          type: array
          items:
            $ref: '#/components/schemas/Bookmark'
        reservations:
          type: array
          items:
            $ref: '#/components/schemas/Reservation'
    GrantedAuthority:
      type: object
      properties:
        authority:
          type: string
    PageReservation:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Reservation'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/SortObject'
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean
    Reservation:
      required:
      - address
      - createdAt
      - event
      - name
      - phoneNumber
      - postCode
      - updatedAt
      - user
      type: object
      properties:
        id:
          type: integer
          format: int32
        user:
          $ref: '#/components/schemas/User'
        event:
          $ref: '#/components/schemas/Event'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        name:
          type: string
        phoneNumber:
          type: string
        postCode:
          type: integer
          format: int32
        address:
          type: string
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
    User:
      required:
      - authorities
      - createdAt
      - email
      - isAccountNonExpired
      - isAccountNonLocked
      - isCredentialsNonExpired
      - isEnabled
      - name
      - password
      - phoneNumber
      - pw
      - role
      - updatedAt
      - username
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        authority:
          type: string
          writeOnly: true
          enum:
          - USER
        id:
          type: integer
          format: int32
        phone:
          type: string
          writeOnly: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        pw:
          type: string
        phoneNumber:
          type: string
        role:
          type: string
          enum:
          - USER
        isEnabled:
          type: boolean
        authorities:
          type: array
          items:
            $ref: '#/components/schemas/GrantedAuthority'
        username:
          type: string
        isAccountNonExpired:
          type: boolean
        isAccountNonLocked:
          type: boolean
        isCredentialsNonExpired:
          type: boolean
    PageEvent:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Event'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    PageBookmark:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Bookmark'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
